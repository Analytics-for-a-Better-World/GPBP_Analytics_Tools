Timer unit: 0.001 s

Total time: 3.3152 s
File: <ipython-input-29-a1c51bc13d8a>
Function: Optimization at line 3

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     3                                           def Optimization(nmax_beds, array_household, current_hospitals_ID, new_hospitals_ID, distance_matrix, S, hosp_count, maxTimeInSeconds = 100, mipGap = 0.001, trace=False, seed = 2021 ):
     4                                               
     5         1          0.0      0.0      0.0      import time
     6         1          0.0      0.0      0.0      import gurobipy as gb
     7         1          0.0      0.0      0.0      from gurobipy import GRB
     8         1          0.0      0.0      0.0      import numpy as np
     9         1          0.0      0.0      0.0      import pandas as pd
    10         1          0.0      0.0      0.0      import random
    11                                               
    12         1          0.0      0.0      0.0      np.random.seed( seed )
    13                                               
    14         1          0.0      0.0      0.0      tStart = time.time()
    15         1          0.0      0.0      0.0      obj_val_array = []
    16                                               
    17         1          0.8      0.8      0.0      distances = distance_matrix[distance_matrix.distance <= S]
    18         1          0.0      0.0      0.0      existinghosp = len(current_hospitals_ID)
    19         1          0.0      0.0      0.0      m = len(current_hospitals_ID) + len(new_hospitals_ID)
    20         1          0.0      0.0      0.0      n = len(array_household)
    21         1          0.0      0.0      0.0      p = existinghosp + 0
    22         1          0.0      0.0      0.0      maxbeds = 0
    23         1          0.0      0.0      0.0      groot_getal = 1000000000
    24                                               
    25                                               # Create existing capacity
    26         1          0.6      0.6      0.0      currently_served = matrix_current1[matrix_current1.distance <= S]
    27         1          3.8      3.8      0.1      currently_served = currently_served.merge(population[['ID','household_count']],how='left', left_on='Pop_ID', right_on = 'ID')
    28         1          0.0      0.0      0.0      c=[0]*(len(current_hospitals_ID) + len(new_hospitals_ID))
    29        69          0.3      0.0      0.0      for i in currently_served['HospCluster'].unique():
    30        68         30.9      0.5      0.9          served_hosp_i = currently_served[currently_served.HospCluster == i]
    31        68         13.6      0.2      0.4          c[i] = served_hosp_i['household_count'].sum()
    32         1          2.6      2.6      0.1      currently_served = currently_served[['Pop_ID', 'household_count']].drop_duplicates().sum()
    33         1          0.2      0.2      0.0      average_served = sum(c) / currently_served['household_count'].sum()
    34         1          0.0      0.0      0.0      ratio = np.random.uniform(low=0.8, high=1.0, size=(len(c))) * prob_stroke * average_days * (1/utilization_rate) / average_served.sum()
    35         1          0.1      0.1      0.0      c = np.round(np.multiply(ratio, c), decimals = 0)
    36                                               
    37                                           #     Existing capacity as large number (no limitations)
    38                                           #     c = [10000000] * m
    39                                           
    40         1          0.1      0.1      0.0      II           = distances['Pop_ID']
    41         1          0.0      0.0      0.0      JJ           = distances['HospCluster']
    42         1          0.2      0.2      0.0      combinations = gb.tuplelist(zip(II,JJ))
    43                                               
    44         1          0.1      0.1      0.0      M = gb.Model("Facility location problem")
    45                                               
    46                                               # Add variables AND objective
    47         1          1.2      1.2      0.0      X = M.addVars(m, vtype=gb.GRB.BINARY)
    48         1          1.1      1.1      0.0      Z = M.addVars(m, lb = 0, vtype=gb.GRB.INTEGER)
    49         1          0.8      0.8      0.0      Y = M.addVars(combinations, lb=0, ub=1, vtype=gb.GRB.CONTINUOUS, obj=[-array_household[i] for i,j in combinations])
    50                                               
    51                                               # Create lists for I and J
    52         1          0.1      0.1      0.0      ah = { j : [] for j in range(m) }
    53         1          0.1      0.1      0.0      JI = { j : [] for j in range(m) }
    54         1          0.4      0.4      0.0      IJ = { i : [] for i in range(n) }
    55       631          0.8      0.0      0.0      for i,j in combinations:
    56       630          0.9      0.0      0.0          ah[j].append(array_household[i])
    57       630          1.0      0.0      0.0          JI[j].append(Y[i,j])
    58       630          0.9      0.0      0.0          IJ[i].append(Y[i,j]) 
    59                                               
    60                                               #Set parameters
    61         1          0.0      0.0      0.0      M.Params.OutputFlag = trace 
    62         1          0.0      0.0      0.0      M.Params.mipgap     = mipGap
    63         1          0.0      0.0      0.0      M.Params.timelimit  = maxTimeInSeconds
    64                                               
    65                                               #Constraints
    66                                               # 1 Existing hospitals are opened
    67         1          0.6      0.6      0.0      M.addConstrs( (X[j] == 1 for j in range(existinghosp)), name="Existing hospitals" )
    68                                               
    69                                               #2 Additional hopsitals less or equal to maximum
    70         1          0.6      0.6      0.0      s1 = M.addLConstr( gb.LinExpr( [ (1,X[j]) for j in range(m) ] ) <= p )
    71                                               
    72                                               #3 Extra beds less or equal to maximum
    73         1          0.5      0.5      0.0      s2 = M.addLConstr( gb.LinExpr( [ (1,Z[j]) for j in range(m) ] ) <= maxbeds )
    74                                               
    75                                               #4 Only assign beneficiaries if the hospital is opened
    76                                               #5 Only add beds when the hospital is opened
    77                                               #7 Utilization constraint
    78      1032          1.5      0.0      0.0      for j in range(m):
    79      1031          7.3      0.0      0.2          M.addLConstr( Z[j] <= groot_getal*X[j] )
    80      1031          7.1      0.0      0.2          M.addLConstr( gb.LinExpr( [1]*len(JI[j]), JI[j] ) <= n*X[j] )
    81      1031         38.1      0.0      1.1          M.addLConstr( prob_stroke*average_days*gb.LinExpr( ah[j], JI[j] ) <= utilization_rate*(c[j]+Z[j]) ) 
    82                                                   
    83                                               #6 One can only be assigned once
    84       318          0.5      0.0      0.0      for i in set(II):
    85       317          1.7      0.0      0.1          M.addLConstr( gb.LinExpr( [1]*len(IJ[i]), IJ[i] ) <= 1 )
    86                                               
    87         1          0.0      0.0      0.0      modelling_time = time.time() - tStart
    88         1          0.0      0.0      0.0      tStart = time.time()
    89                                               
    90                                               # Optimize and extract solution
    91         1          3.5      3.5      0.1      M.optimize()
    92         1          0.0      0.0      0.0      obj_val = -M.objVal
    93         1          0.0      0.0      0.0      obj_val_array.append([S,0,0,obj_val])
    94                                           
    95         7          0.0      0.0      0.0      for each_bed_count in nmax_beds:
    96         6          0.1      0.0      0.0          M.remove(s2)
    97         6          3.7      0.6      0.1          s2 = M.addLConstr( gb.LinExpr( [ (1,Z[j]) for j in range(m) ] ) <= each_bed_count )
    98         6         38.2      6.4      1.2          M.optimize()
    99         6          0.1      0.0      0.0          obj_val = -M.objVal
   100         6          0.0      0.0      0.0          obj_val_array.append([S, 0,each_bed_count,obj_val])
   101                                               
   102                                               # Iterate for multiple additional hospital facilities
   103        19          0.0      0.0      0.0      for each_hosp_count in hosp_count:
   104        18          0.2      0.0      0.0          M.remove(s1)
   105        18          0.1      0.0      0.0          p = existinghosp + each_hosp_count
   106        18         13.1      0.7      0.4          s1 = M.addLConstr( gb.LinExpr( [ (1,X[j]) for j in range(m) ] ) <= p )
   107       126          0.3      0.0      0.0          for each_bed_count in nmax_beds:
   108       108          1.2      0.0      0.0              M.remove(s2)
   109       108         74.2      0.7      2.2              s2 = M.addLConstr( gb.LinExpr( [ (1,Z[j]) for j in range(m) ] ) <= each_bed_count )
   110       108       3054.5     28.3     92.1              M.optimize()
   111       108          3.8      0.0      0.1              obj_val = -M.objVal
   112                                                   
   113       108          0.4      0.0      0.0              obj_val_array.append([S, each_hosp_count,each_bed_count,obj_val])
   114                                               
   115         1          0.0      0.0      0.0      solving_time = time.time() - tStart
   116                                               
   117                                           #     Xvalues, Yvalues, Zvalues = getvariables(n, m, X, Y, Z, II, JJ)
   118                                               
   119         1          0.8      0.8      0.0      df_opt_array = pd.DataFrame(obj_val_array)
   120         1          0.2      0.2      0.0      df_opt_array.columns = ['km','number_of_new_facilities','number_of_extra_beds','count']
   121         1          0.8      0.8      0.0      df_opt_array['number_of_facilities'] = df_opt_array['number_of_new_facilities'] + existinghosp
   122         1          1.2      1.2      0.0      df_opt_array['%'] = (df_opt_array['count']*100/sum(array_household)).round(1)
   123                                               
   124                                           #     return obj_val, Xvalues, Yvalues, Zvalues, tModel, gurobicode[M.status]
   125         1          0.0      0.0      0.0      return df_opt_array, modelling_time, solving_time, gurobicode[M.status]